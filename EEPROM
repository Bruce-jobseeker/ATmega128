#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/eeprom.h>
#include <stdio.h>
#include "UART1.h"

#define MILLIS_INCREMENT 1
#define MICROS_INCREMENT 24

FILE OUTPUT = FDEV_SETUP_STREAM(UART1_transmit, NULL, _FDEV_SETUP_WRITE);
FILE INPUT = FDEV_SETUP_STREAM(NULL, UART1_receive, _FDEV_SETUP_READ);

volatile unsigned long timer0_millis=0;
volatile int timer0_micros=0;

ISR(TIMER0_OVF_vect)
{
	unsigned long m = timer0_millis;
	int f = timer0_micros;
	
	m += MILLIS_INCREMENT;
	f += MICROS_INCREMENT;
	
	m += f/1000;
	f %= 1000;
	
	timer0_millis = m;
	timer0_micros = f;
}

unsigned long millis(void)
{
	unsigned long m;
	uint8_t oldSREG = SREG;
	cli();
	
	m=timer0_millis;
	SREG=oldSREG;
	
	return m;
}

int main(void)
{
    /* Replace with your application code */
	int i, count=64;
	
	stdout=&OUTPUT;
	stdin=&INPUT;
	
	UART1_init();
	
	TCCR0 |= (1 << CS02);
	TIMSK |= (1 << TOIE0);
	
	sei();

    unsigned long current_time, previous_time;
	
	printf("** Start Writing...\r\n");
	
	previous_time = millis();
	
	for(i=0 ; i<count; i++){
		eeprom_write_byte((uint8_t*)i, i);
	}
	current_time = millis();
	
	printf(" Write to EEPROM takes %ld ms.\r\n", current_time - previous_time);
	
	printf("** Start Reading...\r\n");
	
	previous_time = millis();
	
	for(i=0 ; i<count ; i++){
		eeprom_read_byte((uint8_t*)i);
	}
	current_time = millis();
	
	printf("Read from EEPROM takes %ld ms\r\n", current_time - previous_time);
	
    while (1) 
    {
    }
	
	return 0;
}
