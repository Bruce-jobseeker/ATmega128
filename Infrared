#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdio.h>
#include "UART1.h"

FILE OUTPUT = FDEV_SETUP_STREAM(UART1_transmit, NULL, _FDEV_SETUP_WRITE);
FILE INPUT = FDEV_SETUP_STREAM(NULL, UART1_receive, _FDEV_SETUP_READ);

volatile int bitCount;
volatile unsigned long receivedData;

void print_received_data(int repeat)
{
	static unsigned long code_value[]={
		0xFF9867,
		0xFFA25D,
		0xFF629D,
		0xFFE21D,
		0xFF22DD,
		0xFF02FD,
		0xFFC23D,
		0xFFE01F,
		0xFFA857
	};
	
	if(repeat==1)
	printf("** Repeat...\r\n");
	
	else{
		
	for(int i=0 ; i<9 ; i++){
	if(receivedData == code_value[i])
	{
	printf("You Pressed %d\r\n", i);
	PORTB = (1 << i) - 1;
	}
	}
	
	if(receivedData == 0xFF18E7) {
		printf("LED - \r\n");
		PORTB = (PORTB >> 1);}
	else if(receivedData == 0xFF4AB5) {
		printf("LED + \r\n");
		PORTB = (PORTB << 1) + 1;}
	}
}

ISR(INT0_vect)
{
	int time = TCNT0;
	int overflow = TIFR & (1 << TOV0);
	
	if(bitCount == 32){
		if((time > 201) && (time < 221) && (overflow ==0)){
			receivedData=0;
			bitCount=0;
		}
		
		else if((time >166) && (time <186) && (overflow ==0)){
			print_received_data(1);
		}
		
		else{
			bitCount=32;
		}
		
	}
	
	else{
		if((time>40) || (overflow != 0))
		bitCount=32;
		
		else{
			if(time>26)
			receivedData = (receivedData << 1) +1;
			else
			receivedData = (receivedData << 1);
			
			if(bitCount==31)
			print_received_data(0);
			
			bitCount++;
		}
	}
	
	TCNT0=0;
	TIFR=TIFR|(1 << TOV0);
}

int main(void)
{
    /* Replace with your application code */
	stdout=&OUTPUT;
	stdin=&INPUT;
	
	DDRB = 0xFF;
	
	UART1_init();
	
	TCCR0 |= (1<<CS00) | (1 << CS01) | (1 << CS02);
	EIMSK |= (1 << INT0);
	EICRA |= (1 << ISC01);
	sei();
	
	bitCount=32;
	
	printf("**Initialization Completed... \r\n");
	
    while (1) 
    {
    }
	
	return 0;
}
